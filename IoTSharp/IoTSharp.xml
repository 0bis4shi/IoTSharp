<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IoTSharp</name>
    </assembly>
    <members>
        <member name="P:IoTSharp.AppSettings.MqttBroker">
            <summary>
            Broker settings
            </summary>
        </member>
        <member name="P:IoTSharp.AppSettings.MqttClient">
            <summary>
            mqtt client settings
            </summary>
        </member>
        <member name="P:IoTSharp.MqttClientSetting.MqttBroker">
            <summary>
            built-in or IP„ÄÅHostName
            </summary>
        </member>
        <member name="T:IoTSharp.Extensions.RpcClient">
            <summary>
            https://github.com/chkr1011/MQTTnet/blob/master/Source/MQTTnet.Extensions.Rpc/MqttRpcClient.cs
            </summary>
        </member>
        <member name="M:IoTSharp.Extensions.DataExtension.SaveAsync``1(IoTSharp.Data.ApplicationDbContext,System.Collections.Generic.Dictionary{System.String,System.Object},IoTSharp.Data.Device,IoTSharp.Data.DataSide)">
            <summary>
            Save Data to Device's and <typeparamref name="L"/>
            </summary>
            <typeparam name="L">Latest</typeparam>
            <param name="data"></param>
            <param name="device"></param>
            <param name="dataSide"></param>
            <param name="_context"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Extensions.DataExtension.PreparingData``1(IoTSharp.Data.ApplicationDbContext,System.Collections.Generic.Dictionary{System.String,System.Object},IoTSharp.Data.Device,IoTSharp.Data.DataSide)">
            <summary>
            Preparing Data to Device's   <typeparamref name="L"/>
            </summary>
            <typeparam name="L"></typeparam>
            <param name="_context"></param>
            <param name="data"></param>
            <param name="device"></param>
            <param name="dataSide"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Extensions.DeviceExtension.AfterCreateDevice(IoTSharp.Data.ApplicationDbContext,IoTSharp.Data.Device)">
            <summary>
            When creating a device, all the things that need to be done here are done
            </summary>
            <param name="_context"></param>
            <param name="device"></param>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Register(IoTSharp.Dtos.RegisterDto)">
            <summary>
            Register a user
            </summary>
            <param name="model"></param>
            <returns ></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetDevices(System.Guid)">
            <summary>
            Get all of the customer's devices.
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetIdentity(System.Guid)">
            <summary>
            Get a device's credentials
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatest(System.Guid)">
            <summary>
            Request attribute values from the server
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryLatest(System.Guid)">
            <summary>
            Request telemetry values from the server
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryLatest(System.Guid,System.String)">
            <summary>
            Request telemetry values from the server
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatest(System.Guid,System.String)">
            <summary>
            Request telemetry values from the server
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,System.String,System.DateTime)">
            <summary>
            Request telemetry values from the server
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <param name="begin">For example: 2019-06-06 12:24</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,System.String,System.DateTime,System.DateTime)">
            <summary>
            Request telemetry values from the server
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <param name="begin">For example: 2019-06-06 12:24</param>
            <param name="end">For example: 2019-06-06 12:24</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetDevice(System.Guid)">
            <summary>
            Get a device's detail
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PutDevice(System.Guid,IoTSharp.Dtos.DevicePutDto)">
            <summary>
            Modify a device
            </summary>
            <param name="id"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PostDevice(IoTSharp.Dtos.DevicePostDto)">
            <summary>
            Create a new device
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Rpc(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Device rpc
            </summary>
            <param name="access_token"></param>
            <param name="method"></param>
            <param name="timeout"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Telemetry(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Upload  device telemetry to the server.
            </summary>
            <param name="access_token">Device 's access token</param>
            <param name="telemetrys"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Attributes(System.String,IoTSharp.Data.DataSide,System.String)">
             <summary>
             Get service-side device attributes from  the server.
             </summary>
             <param name="access_token">Device 's access token </param>
            <param name="dataSide">Specifying data side.</param>
            <param name="keys">Specifying Attribute's keys</param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Attributes(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Upload client-side device attributes to the server.
            </summary>
            <param name="access_token">Device 's access token </param>
            <param name="attributes">attributes</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.GetTenant">
            <summary>
            Only for SystemAdmin
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.GetTenant(System.Guid)">
            <summary>
            Normal user can use
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:IoTSharp.Data.DeviceIdentity.IdentityId">
            <summary>
            When <see cref="P:IoTSharp.Data.DeviceIdentity.IdentityType"/> Is <see cref="F:IoTSharp.Data.IdentityType.AccessToken"/> ,this is a Token.
            When <see cref="P:IoTSharp.Data.DeviceIdentity.IdentityType"/> Is <see cref="F:IoTSharp.Data.IdentityType.DevicePassword"/> ,this is a device name.
            When <see cref="P:IoTSharp.Data.DeviceIdentity.IdentityType"/> Is <see cref="F:IoTSharp.Data.IdentityType.X509Certificate"/> ,this is X509 Certificate' Fingerprint.
            </summary>
        </member>
        <member name="P:IoTSharp.Data.DeviceIdentity.IdentityValue">
            <summary>
            When <see cref="P:IoTSharp.Data.DeviceIdentity.IdentityType"/> Is <see cref="F:IoTSharp.Data.IdentityType.AccessToken"/> ,this is null.
            When <see cref="P:IoTSharp.Data.DeviceIdentity.IdentityType"/> Is <see cref="F:IoTSharp.Data.IdentityType.DevicePassword"/> ,this is a password.
            When <see cref="P:IoTSharp.Data.DeviceIdentity.IdentityType"/> Is <see cref="F:IoTSharp.Data.IdentityType.X509Certificate"/> ,this is X509 Certificate' PEM.
            </summary>
        </member>
        <member name="T:IoTSharp.Properties.Resources">
            <summary>
              ‰∏Ä‰∏™Âº∫Á±ªÂûãÁöÑËµÑÊ∫êÁ±ªÔºåÁî®‰∫éÊü•ÊâæÊú¨Âú∞ÂåñÁöÑÂ≠óÁ¨¶‰∏≤Á≠â„ÄÇ
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.ResourceManager">
            <summary>
              ËøîÂõûÊ≠§Á±ª‰ΩøÁî®ÁöÑÁºìÂ≠òÁöÑ ResourceManager ÂÆû‰æã„ÄÇ
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.Culture">
            <summary>
              ÈáçÂÜôÂΩìÂâçÁ∫øÁ®ãÁöÑ CurrentUICulture Â±ûÊÄß
              ÈáçÂÜôÂΩìÂâçÁ∫øÁ®ãÁöÑ CurrentUICulture Â±ûÊÄß„ÄÇ
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.ShowHelp">
            <summary>
              Êü•ÊâæÁ±ª‰ºº ÊòæÁ§∫Â∏ÆÂä© ÁöÑÊú¨Âú∞ÂåñÂ≠óÁ¨¶‰∏≤„ÄÇ
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.TheCertificateIsInstalled">
            <summary>
              Êü•ÊâæÁ±ª‰ºº The certificate is installed ÁöÑÊú¨Âú∞ÂåñÂ≠óÁ¨¶‰∏≤„ÄÇ
            </summary>
        </member>
        <member name="T:LiteQueue.LiteQueue`1">
            <summary>
            Uses LiteDB to provide a persisted, thread safe, (optionally) transactional, FIFO queue.
            
            Suitable for use on clients as a lightweight, portable alternative to MSMQ. Not recommended for use 
            on large server side applications due to performance limitations of LiteDB.
            </summary>
        </member>
        <member name="P:LiteQueue.LiteQueue`1.IsTransactional">
            <summary>
            Impacts operation of <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/> method. Can only be set once in constructor.
            </summary>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.#ctor(LiteDB.LiteDatabase,System.String,System.Boolean)">
            <summary>
            Creates a collection for you in the database
            </summary>
            <param name="db">The LiteDB database. You are responsible for its lifecycle (using/dispose)</param>
            <param name="collectionName">Name of the collection to create</param>
            <param name="transactional">Whether the queue should use transaction logic, default true</param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.#ctor(LiteDB.ILiteCollection{LiteQueue.QueueEntry{`0}},System.Boolean)">
            <summary>
            Uses the provided database collection
            </summary>
            <param name="collection">A LiteDB collection.</param>
            <param name="transactional">Whether the queue should use transaction logic, default true</param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.#ctor(LiteDB.LiteDatabase,System.Boolean)">
            <summary>
            Creates a collection for you in the database, collection's name is  <typeparamref name="T"/>
            </summary>
            <param name="db">The LiteDB database. You are responsible for its lifecycle (using/dispose)</param>
            <param name="transactional">Whether the queue should use transaction logic, default true</param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Enqueue(`0)">
            <summary>
            Adds a single item to queue. See <see cref="M:LiteQueue.LiteQueue`1.Enqueue(System.Collections.Generic.IEnumerable{`0})"/> for adding a batch.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Enqueue(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a batch of items to the queue. See <see cref="M:LiteQueue.LiteQueue`1.Enqueue(`0)"/> for adding a single item.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Dequeue">
            <summary>
            Transactional queues:
                Marks item as checked out but does not remove from queue. You are expected to later call <see cref="M:LiteQueue.LiteQueue`1.Commit(LiteQueue.QueueEntry{`0})"/> or <see cref="M:LiteQueue.LiteQueue`1.Abort(LiteQueue.QueueEntry{`0})"/>
            Non-transactional queues:
                Removes item from queue with no need to call <see cref="M:LiteQueue.LiteQueue`1.Commit(LiteQueue.QueueEntry{`0})"/> or <see cref="M:LiteQueue.LiteQueue`1.Abort(LiteQueue.QueueEntry{`0})"/>
            </summary>
            <returns>An item if found or null</returns>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Dequeue(System.Int32)">
            <summary>
            Batch equivalent of <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/>
            </summary>
            <param name="batchSize">The maximum number of items to dequeue</param>
            <returns>The items found or an empty collection (never null)</returns>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.CurrentCheckouts">
            <summary>
            Obtains list of items currently checked out (but not yet commited or aborted) as a result of Dequeue calls on a transactional queue
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
            <returns>Items found or empty collection (never null)</returns>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.ResetOrphans">
            <summary>
            Aborts all currently checked out items. Equivalent of calling <see cref="M:LiteQueue.LiteQueue`1.CurrentCheckouts"/> followed by <see cref="M:LiteQueue.LiteQueue`1.Abort(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Abort(LiteQueue.QueueEntry{`0})">
            <summary>
            Aborts a transaction on a single item. See <see cref="M:LiteQueue.LiteQueue`1.Abort(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})"/> for batches.
            </summary>
            <param name="item">An item that was obtained from a <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/> call</param>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Abort(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})">
            <summary>
            Aborts a transation on a group of items. See <see cref="M:LiteQueue.LiteQueue`1.Abort(LiteQueue.QueueEntry{`0})"/> for a single item.
            </summary>
            <param name="items">Items that were obtained from a <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/> call</param>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Commit(LiteQueue.QueueEntry{`0})">
            <summary>
            Commits a transaction on a single item. See <see cref="M:LiteQueue.LiteQueue`1.Commit(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})"/> for batches.
            </summary>
            <param name="item">An item that was obtained from a <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/> call</param>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LiteQueue.LiteQueue`1.Commit(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})" -->
        <member name="M:LiteQueue.LiteQueue`1.Count">
            <summary>
            Number of items in queue, including those that have been checked out.
            </summary>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Clear">
            <summary>
            Removes all items from queue, including any that have been checked out.
            </summary>
        </member>
    </members>
</doc>
